
TP0 Control III.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000214  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a7  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d5  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000478  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00001918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000451  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000e1  00000000  00000000  00001e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  88:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup_ADC>:
	ADC INTERRUPT = ENABLE
	PIN DE ENTRADA = ADC0
	REFERENCIA = 5V
	*/
	
	ADMUX = (1 << REFS0) | (1 << MUX0);
  90:	81 e4       	ldi	r24, 0x41	; 65
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (0 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 	
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	08 95       	ret

0000009e <setup_PWM>:
	COMPARADOR DC = OCR1A
	PIN DE  SALIDA = PB1
	DC INICIAL = 50%
	*/
	
	DDRB |= (1 << PB1); // OC1A = PB1 en Arduino Uno
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	84 b9       	out	0x04, r24	; 4

	TCCR1A = (1 << WGM11) | (1 << COM1A1);
  a4:	82 e8       	ldi	r24, 0x82	; 130
  a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10); // 
  aa:	89 e1       	ldi	r24, 0x19	; 25
  ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 |= (1 << TOIE1);
  b0:	ef e6       	ldi	r30, 0x6F	; 111
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
	
	ICR1 = 15999;
  ba:	8f e7       	ldi	r24, 0x7F	; 127
  bc:	9e e3       	ldi	r25, 0x3E	; 62
  be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 8000;  // Valor inicial de ciclo de trabajo.
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	9f e1       	ldi	r25, 0x1F	; 31
  ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  d2:	08 95       	ret

000000d4 <leer_ADC>:
	
	}
	
uint16_t leer_ADC(){
	
	ADCSRA |= (1 << ADSC);
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
	
	while ( !(ADCSRA & (1 << ADIF)) ); // Se espera hasta que termine la conversion.
  de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e2:	84 ff       	sbrs	r24, 4
  e4:	fc cf       	rjmp	.-8      	; 0xde <leer_ADC+0xa>

	ADCSRA |= (1 << ADIF);
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 61       	ori	r24, 0x10	; 16
  ee:	80 83       	st	Z, r24

	return ADC*C; // Devuelve el valor en milivoltios. C = 5.
  f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f8:	9c 01       	movw	r18, r24
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
	
	}
 102:	82 0f       	add	r24, r18
 104:	93 1f       	adc	r25, r19
 106:	08 95       	ret

00000108 <filtro_RC>:
		
uint16_t filtro_RC(uint16_t tension_entrada){
	
	// Filtrado
	
	uint16_t tension_salida_anterior = tension_salida_actual;
 108:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tension_salida_actual>
 10c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <tension_salida_actual+0x1>
	tension_salida_actual = (uint16_t)(alfa * tension_salida_anterior + beta * tension_entrada);
 110:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <tension_salida_actual+0x1>
 114:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <tension_salida_actual>
	
	// Conversion a ciclo de trabajo:
	
	return tension_salida_actual;
 118:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <tension_salida_actual>
 11c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <tension_salida_actual+0x1>
	
}
 120:	08 95       	ret

00000122 <__vector_13>:
#define T 1
#define tau 500
#define alfa  tau / (T + tau)
#define beta  T / (T + tau)

ISR(TIMER1_OVF_vect) {
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
	
	flag_lectura_ADC = 1;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_lectura_ADC>
	
	};
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <main>:

int main(void)
{
    setup_ADC();
 140:	0e 94 48 00 	call	0x90	; 0x90 <setup_ADC>
	setup_PWM();
 144:	0e 94 4f 00 	call	0x9e	; 0x9e <setup_PWM>
	USART_init();
 148:	0e 94 c2 00 	call	0x184	; 0x184 <USART_init>
	sei();
 14c:	78 94       	sei

    while (1) {
		 
		if (flag_lectura_ADC) {
 14e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag_lectura_ADC>
 152:	88 23       	and	r24, r24
 154:	e1 f3       	breq	.-8      	; 0x14e <main+0xe>
			flag_lectura_ADC = 0;
 156:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag_lectura_ADC>
			
			tension_entrada = leer_ADC();
 15a:	0e 94 6a 00 	call	0xd4	; 0xd4 <leer_ADC>
 15e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <tension_entrada+0x1>
 162:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tension_entrada>
			tension_filtrada = filtro_RC(referencia - tension_entrada);
 166:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <tension_entrada>
 16a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <tension_entrada+0x1>
 16e:	88 eb       	ldi	r24, 0xB8	; 184
 170:	9b e0       	ldi	r25, 0x0B	; 11
 172:	82 1b       	sub	r24, r18
 174:	93 0b       	sbc	r25, r19
 176:	0e 94 84 00 	call	0x108	; 0x108 <filtro_RC>
 17a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 182:	e5 cf       	rjmp	.-54     	; 0x14e <main+0xe>

00000184 <USART_init>:
#include <avr/io.h>
#include "uart.h"

void USART_init(void) {
	// Configurar Baud Rate
	UBRR0H = (uint8_t)(BAUD_PRESCALLER >> 8);
 184:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 188:	87 e6       	ldi	r24, 0x67	; 103
 18a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilitar transmisión y recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 18e:	88 e1       	ldi	r24, 0x18	; 24
 190:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configuración: 8 bits de datos, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 194:	86 e0       	ldi	r24, 0x06	; 6
 196:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
