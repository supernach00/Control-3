
TP0 Control III.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  000005f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000624  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099b  00000000  00000000  00000704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d7  00000000  00000000  0000109f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000478  00000000  00000000  00001876  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000438  00000000  00000000  00001e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000154  00000000  00000000  00002250  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000023a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 de 00 	call	0x1bc	; 0x1bc <main>
  88:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup_ADC>:
	ADC INTERRUPT = ENABLE
	PIN DE ENTRADA = ADC0
	REFERENCIA = 5V
	*/
	
	ADMUX = (1 << REFS0) | (1 << MUX0);
  90:	81 e4       	ldi	r24, 0x41	; 65
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (0 << ADIE) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); 	
  96:	87 e8       	ldi	r24, 0x87	; 135
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	08 95       	ret

0000009e <setup_PWM>:
	COMPARADOR DC = OCR1A
	PIN DE  SALIDA = PB1
	DC INICIAL = 50%
	*/
	
	DDRB |= (1 << PB1); // OC1A = PB1 en Arduino Uno
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	84 b9       	out	0x04, r24	; 4

	TCCR1A = (1 << WGM11) | (1 << COM1A1);
  a4:	82 e8       	ldi	r24, 0x82	; 130
  a6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << WGM13) | (1 << CS10); // 
  aa:	89 e1       	ldi	r24, 0x19	; 25
  ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 |= (1 << TOIE1);
  b0:	ef e6       	ldi	r30, 0x6F	; 111
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
	
	ICR1 = 15999;
  ba:	8f e7       	ldi	r24, 0x7F	; 127
  bc:	9e e3       	ldi	r25, 0x3E	; 62
  be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 8000;  // Valor inicial de ciclo de trabajo.
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	9f e1       	ldi	r25, 0x1F	; 31
  ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  d2:	08 95       	ret

000000d4 <leer_ADC>:
	
	}
	
uint16_t leer_ADC(){
	
	ADCSRA |= (1 << ADSC);
  d4:	ea e7       	ldi	r30, 0x7A	; 122
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	80 83       	st	Z, r24
	
	while ( !(ADCSRA & (1 << ADIF)) ); // Se espera hasta que termine la conversion.
  de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e2:	84 ff       	sbrs	r24, 4
  e4:	fc cf       	rjmp	.-8      	; 0xde <leer_ADC+0xa>

	ADCSRA |= (1 << ADIF);
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	80 61       	ori	r24, 0x10	; 16
  ee:	80 83       	st	Z, r24

	return ADC*C; // Devuelve el valor en milivoltios. C = 5.
  f0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f8:	9c 01       	movw	r18, r24
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
	
	}
 102:	82 0f       	add	r24, r18
 104:	93 1f       	adc	r25, r19
 106:	08 95       	ret

00000108 <filtro_RC>:
		
uint16_t filtro_RC(uint16_t tension_entrada){
 108:	cf 92       	push	r12
 10a:	df 92       	push	r13
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	ec 01       	movw	r28, r24
	
	// Filtrado
	
	static float tension_salida = 0.0;
	tension_salida = (alfa * tension_salida + beta * tension_entrada);
 116:	2f e2       	ldi	r18, 0x2F	; 47
 118:	3a eb       	ldi	r19, 0xBA	; 186
 11a:	48 e6       	ldi	r20, 0x68	; 104
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 126:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 12a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 12e:	0e 94 3c 02 	call	0x478	; 0x478 <__mulsf3>
 132:	6b 01       	movw	r12, r22
 134:	7c 01       	movw	r14, r24
 136:	be 01       	movw	r22, r28
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 ae 01 	call	0x35c	; 0x35c <__floatunsisf>
 140:	2c e8       	ldi	r18, 0x8C	; 140
 142:	3e e2       	ldi	r19, 0x2E	; 46
 144:	4a eb       	ldi	r20, 0xBA	; 186
 146:	5d e3       	ldi	r21, 0x3D	; 61
 148:	0e 94 3c 02 	call	0x478	; 0x478 <__mulsf3>
 14c:	9b 01       	movw	r18, r22
 14e:	ac 01       	movw	r20, r24
 150:	c7 01       	movw	r24, r14
 152:	b6 01       	movw	r22, r12
 154:	0e 94 13 01 	call	0x226	; 0x226 <__addsf3>
 158:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 15c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 164:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	
	// Conversion a ciclo de trabajo:
	
	return (uint16_t) tension_salida;
 168:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__fixunssfsi>
	
}
 16c:	cb 01       	movw	r24, r22
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	df 90       	pop	r13
 178:	cf 90       	pop	r12
 17a:	08 95       	ret

0000017c <tension_a_WC>:
	
	// Convierte un valor de tensión en milivoltios a un entero entre 0 y 15999, que se utiliza
	// como valor de comparacion del timer1.
	// Esto define el ciclo de trabajo (WC) de la PWM de salida.
	
	return tension *  A - 1; //  A = 16000 / (5*1024)
 17c:	20 e8       	ldi	r18, 0x80	; 128
 17e:	3e e3       	ldi	r19, 0x3E	; 62
 180:	ac 01       	movw	r20, r24
 182:	42 9f       	mul	r20, r18
 184:	c0 01       	movw	r24, r0
 186:	43 9f       	mul	r20, r19
 188:	90 0d       	add	r25, r0
 18a:	52 9f       	mul	r21, r18
 18c:	90 0d       	add	r25, r0
 18e:	11 24       	eor	r1, r1
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	74 e1       	ldi	r23, 0x14	; 20
 194:	0e 94 a9 02 	call	0x552	; 0x552 <__udivmodhi4>
	
}
 198:	cb 01       	movw	r24, r22
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	08 95       	ret

0000019e <__vector_13>:
#define T 1
#define tau 500
#define alfa  tau / (T + tau)
#define beta  T / (T + tau)

ISR(TIMER1_OVF_vect) {
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	8f 93       	push	r24
	
	flag_lectura_ADC = 1;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag_lectura_ADC>
	
	};
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <main>:

int main(void)
{
    setup_ADC();
 1bc:	0e 94 48 00 	call	0x90	; 0x90 <setup_ADC>
	setup_PWM();
 1c0:	0e 94 4f 00 	call	0x9e	; 0x9e <setup_PWM>
	USART_init();
 1c4:	0e 94 06 01 	call	0x20c	; 0x20c <USART_init>
	sei();
 1c8:	78 94       	sei

    while (1) {
		 
		if (flag_lectura_ADC) {
 1ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag_lectura_ADC>
 1ce:	88 23       	and	r24, r24
 1d0:	e1 f3       	breq	.-8      	; 0x1ca <main+0xe>
			flag_lectura_ADC = 0;
 1d2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag_lectura_ADC>
			
			tension_entrada = leer_ADC();
 1d6:	0e 94 6a 00 	call	0xd4	; 0xd4 <leer_ADC>
 1da:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <tension_entrada+0x1>
 1de:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <tension_entrada>
			tension_filtrada = filtro_RC(referencia - tension_entrada);
 1e2:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <tension_entrada>
 1e6:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <tension_entrada+0x1>
 1ea:	88 eb       	ldi	r24, 0xB8	; 184
 1ec:	9b e0       	ldi	r25, 0x0B	; 11
 1ee:	82 1b       	sub	r24, r18
 1f0:	93 0b       	sbc	r25, r19
 1f2:	0e 94 84 00 	call	0x108	; 0x108 <filtro_RC>
 1f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <tension_filtrada+0x1>
 1fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tension_filtrada>
			OCR1A = tension_a_WC(tension_filtrada);
 1fe:	0e 94 be 00 	call	0x17c	; 0x17c <tension_a_WC>
 202:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 206:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 20a:	df cf       	rjmp	.-66     	; 0x1ca <main+0xe>

0000020c <USART_init>:
#include <avr/io.h>
#include "uart.h"

void USART_init(void) {
	// Configurar Baud Rate
	UBRR0H = (uint8_t)(BAUD_PRESCALLER >> 8);
 20c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 210:	87 e6       	ldi	r24, 0x67	; 103
 212:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Habilitar transmisión y recepción
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 216:	88 e1       	ldi	r24, 0x18	; 24
 218:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// Configuración: 8 bits de datos, 1 bit de stop, sin paridad
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 222:	08 95       	ret

00000224 <__subsf3>:
 224:	50 58       	subi	r21, 0x80	; 128

00000226 <__addsf3>:
 226:	bb 27       	eor	r27, r27
 228:	aa 27       	eor	r26, r26
 22a:	0e 94 2a 01 	call	0x254	; 0x254 <__addsf3x>
 22e:	0c 94 02 02 	jmp	0x404	; 0x404 <__fp_round>
 232:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__fp_pscA>
 236:	38 f0       	brcs	.+14     	; 0x246 <__addsf3+0x20>
 238:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_pscB>
 23c:	20 f0       	brcs	.+8      	; 0x246 <__addsf3+0x20>
 23e:	39 f4       	brne	.+14     	; 0x24e <__addsf3+0x28>
 240:	9f 3f       	cpi	r25, 0xFF	; 255
 242:	19 f4       	brne	.+6      	; 0x24a <__addsf3+0x24>
 244:	26 f4       	brtc	.+8      	; 0x24e <__addsf3+0x28>
 246:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__fp_nan>
 24a:	0e f4       	brtc	.+2      	; 0x24e <__addsf3+0x28>
 24c:	e0 95       	com	r30
 24e:	e7 fb       	bst	r30, 7
 250:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__fp_inf>

00000254 <__addsf3x>:
 254:	e9 2f       	mov	r30, r25
 256:	0e 94 13 02 	call	0x426	; 0x426 <__fp_split3>
 25a:	58 f3       	brcs	.-42     	; 0x232 <__addsf3+0xc>
 25c:	ba 17       	cp	r27, r26
 25e:	62 07       	cpc	r22, r18
 260:	73 07       	cpc	r23, r19
 262:	84 07       	cpc	r24, r20
 264:	95 07       	cpc	r25, r21
 266:	20 f0       	brcs	.+8      	; 0x270 <__addsf3x+0x1c>
 268:	79 f4       	brne	.+30     	; 0x288 <__addsf3x+0x34>
 26a:	a6 f5       	brtc	.+104    	; 0x2d4 <__addsf3x+0x80>
 26c:	0c 94 35 02 	jmp	0x46a	; 0x46a <__fp_zero>
 270:	0e f4       	brtc	.+2      	; 0x274 <__addsf3x+0x20>
 272:	e0 95       	com	r30
 274:	0b 2e       	mov	r0, r27
 276:	ba 2f       	mov	r27, r26
 278:	a0 2d       	mov	r26, r0
 27a:	0b 01       	movw	r0, r22
 27c:	b9 01       	movw	r22, r18
 27e:	90 01       	movw	r18, r0
 280:	0c 01       	movw	r0, r24
 282:	ca 01       	movw	r24, r20
 284:	a0 01       	movw	r20, r0
 286:	11 24       	eor	r1, r1
 288:	ff 27       	eor	r31, r31
 28a:	59 1b       	sub	r21, r25
 28c:	99 f0       	breq	.+38     	; 0x2b4 <__addsf3x+0x60>
 28e:	59 3f       	cpi	r21, 0xF9	; 249
 290:	50 f4       	brcc	.+20     	; 0x2a6 <__addsf3x+0x52>
 292:	50 3e       	cpi	r21, 0xE0	; 224
 294:	68 f1       	brcs	.+90     	; 0x2f0 <__addsf3x+0x9c>
 296:	1a 16       	cp	r1, r26
 298:	f0 40       	sbci	r31, 0x00	; 0
 29a:	a2 2f       	mov	r26, r18
 29c:	23 2f       	mov	r18, r19
 29e:	34 2f       	mov	r19, r20
 2a0:	44 27       	eor	r20, r20
 2a2:	58 5f       	subi	r21, 0xF8	; 248
 2a4:	f3 cf       	rjmp	.-26     	; 0x28c <__addsf3x+0x38>
 2a6:	46 95       	lsr	r20
 2a8:	37 95       	ror	r19
 2aa:	27 95       	ror	r18
 2ac:	a7 95       	ror	r26
 2ae:	f0 40       	sbci	r31, 0x00	; 0
 2b0:	53 95       	inc	r21
 2b2:	c9 f7       	brne	.-14     	; 0x2a6 <__addsf3x+0x52>
 2b4:	7e f4       	brtc	.+30     	; 0x2d4 <__addsf3x+0x80>
 2b6:	1f 16       	cp	r1, r31
 2b8:	ba 0b       	sbc	r27, r26
 2ba:	62 0b       	sbc	r22, r18
 2bc:	73 0b       	sbc	r23, r19
 2be:	84 0b       	sbc	r24, r20
 2c0:	ba f0       	brmi	.+46     	; 0x2f0 <__addsf3x+0x9c>
 2c2:	91 50       	subi	r25, 0x01	; 1
 2c4:	a1 f0       	breq	.+40     	; 0x2ee <__addsf3x+0x9a>
 2c6:	ff 0f       	add	r31, r31
 2c8:	bb 1f       	adc	r27, r27
 2ca:	66 1f       	adc	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	88 1f       	adc	r24, r24
 2d0:	c2 f7       	brpl	.-16     	; 0x2c2 <__addsf3x+0x6e>
 2d2:	0e c0       	rjmp	.+28     	; 0x2f0 <__addsf3x+0x9c>
 2d4:	ba 0f       	add	r27, r26
 2d6:	62 1f       	adc	r22, r18
 2d8:	73 1f       	adc	r23, r19
 2da:	84 1f       	adc	r24, r20
 2dc:	48 f4       	brcc	.+18     	; 0x2f0 <__addsf3x+0x9c>
 2de:	87 95       	ror	r24
 2e0:	77 95       	ror	r23
 2e2:	67 95       	ror	r22
 2e4:	b7 95       	ror	r27
 2e6:	f7 95       	ror	r31
 2e8:	9e 3f       	cpi	r25, 0xFE	; 254
 2ea:	08 f0       	brcs	.+2      	; 0x2ee <__addsf3x+0x9a>
 2ec:	b0 cf       	rjmp	.-160    	; 0x24e <__addsf3+0x28>
 2ee:	93 95       	inc	r25
 2f0:	88 0f       	add	r24, r24
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <__addsf3x+0xa2>
 2f4:	99 27       	eor	r25, r25
 2f6:	ee 0f       	add	r30, r30
 2f8:	97 95       	ror	r25
 2fa:	87 95       	ror	r24
 2fc:	08 95       	ret

000002fe <__fixunssfsi>:
 2fe:	0e 94 1b 02 	call	0x436	; 0x436 <__fp_splitA>
 302:	88 f0       	brcs	.+34     	; 0x326 <__fixunssfsi+0x28>
 304:	9f 57       	subi	r25, 0x7F	; 127
 306:	98 f0       	brcs	.+38     	; 0x32e <__fixunssfsi+0x30>
 308:	b9 2f       	mov	r27, r25
 30a:	99 27       	eor	r25, r25
 30c:	b7 51       	subi	r27, 0x17	; 23
 30e:	b0 f0       	brcs	.+44     	; 0x33c <__fixunssfsi+0x3e>
 310:	e1 f0       	breq	.+56     	; 0x34a <__fixunssfsi+0x4c>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	88 1f       	adc	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	1a f0       	brmi	.+6      	; 0x322 <__fixunssfsi+0x24>
 31c:	ba 95       	dec	r27
 31e:	c9 f7       	brne	.-14     	; 0x312 <__fixunssfsi+0x14>
 320:	14 c0       	rjmp	.+40     	; 0x34a <__fixunssfsi+0x4c>
 322:	b1 30       	cpi	r27, 0x01	; 1
 324:	91 f0       	breq	.+36     	; 0x34a <__fixunssfsi+0x4c>
 326:	0e 94 35 02 	call	0x46a	; 0x46a <__fp_zero>
 32a:	b1 e0       	ldi	r27, 0x01	; 1
 32c:	08 95       	ret
 32e:	0c 94 35 02 	jmp	0x46a	; 0x46a <__fp_zero>
 332:	67 2f       	mov	r22, r23
 334:	78 2f       	mov	r23, r24
 336:	88 27       	eor	r24, r24
 338:	b8 5f       	subi	r27, 0xF8	; 248
 33a:	39 f0       	breq	.+14     	; 0x34a <__fixunssfsi+0x4c>
 33c:	b9 3f       	cpi	r27, 0xF9	; 249
 33e:	cc f3       	brlt	.-14     	; 0x332 <__fixunssfsi+0x34>
 340:	86 95       	lsr	r24
 342:	77 95       	ror	r23
 344:	67 95       	ror	r22
 346:	b3 95       	inc	r27
 348:	d9 f7       	brne	.-10     	; 0x340 <__fixunssfsi+0x42>
 34a:	3e f4       	brtc	.+14     	; 0x35a <__fixunssfsi+0x5c>
 34c:	90 95       	com	r25
 34e:	80 95       	com	r24
 350:	70 95       	com	r23
 352:	61 95       	neg	r22
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	8f 4f       	sbci	r24, 0xFF	; 255
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	08 95       	ret

0000035c <__floatunsisf>:
 35c:	e8 94       	clt
 35e:	09 c0       	rjmp	.+18     	; 0x372 <__floatsisf+0x12>

00000360 <__floatsisf>:
 360:	97 fb       	bst	r25, 7
 362:	3e f4       	brtc	.+14     	; 0x372 <__floatsisf+0x12>
 364:	90 95       	com	r25
 366:	80 95       	com	r24
 368:	70 95       	com	r23
 36a:	61 95       	neg	r22
 36c:	7f 4f       	sbci	r23, 0xFF	; 255
 36e:	8f 4f       	sbci	r24, 0xFF	; 255
 370:	9f 4f       	sbci	r25, 0xFF	; 255
 372:	99 23       	and	r25, r25
 374:	a9 f0       	breq	.+42     	; 0x3a0 <__floatsisf+0x40>
 376:	f9 2f       	mov	r31, r25
 378:	96 e9       	ldi	r25, 0x96	; 150
 37a:	bb 27       	eor	r27, r27
 37c:	93 95       	inc	r25
 37e:	f6 95       	lsr	r31
 380:	87 95       	ror	r24
 382:	77 95       	ror	r23
 384:	67 95       	ror	r22
 386:	b7 95       	ror	r27
 388:	f1 11       	cpse	r31, r1
 38a:	f8 cf       	rjmp	.-16     	; 0x37c <__floatsisf+0x1c>
 38c:	fa f4       	brpl	.+62     	; 0x3cc <__floatsisf+0x6c>
 38e:	bb 0f       	add	r27, r27
 390:	11 f4       	brne	.+4      	; 0x396 <__floatsisf+0x36>
 392:	60 ff       	sbrs	r22, 0
 394:	1b c0       	rjmp	.+54     	; 0x3cc <__floatsisf+0x6c>
 396:	6f 5f       	subi	r22, 0xFF	; 255
 398:	7f 4f       	sbci	r23, 0xFF	; 255
 39a:	8f 4f       	sbci	r24, 0xFF	; 255
 39c:	9f 4f       	sbci	r25, 0xFF	; 255
 39e:	16 c0       	rjmp	.+44     	; 0x3cc <__floatsisf+0x6c>
 3a0:	88 23       	and	r24, r24
 3a2:	11 f0       	breq	.+4      	; 0x3a8 <__floatsisf+0x48>
 3a4:	96 e9       	ldi	r25, 0x96	; 150
 3a6:	11 c0       	rjmp	.+34     	; 0x3ca <__floatsisf+0x6a>
 3a8:	77 23       	and	r23, r23
 3aa:	21 f0       	breq	.+8      	; 0x3b4 <__floatsisf+0x54>
 3ac:	9e e8       	ldi	r25, 0x8E	; 142
 3ae:	87 2f       	mov	r24, r23
 3b0:	76 2f       	mov	r23, r22
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <__floatsisf+0x5e>
 3b4:	66 23       	and	r22, r22
 3b6:	71 f0       	breq	.+28     	; 0x3d4 <__floatsisf+0x74>
 3b8:	96 e8       	ldi	r25, 0x86	; 134
 3ba:	86 2f       	mov	r24, r22
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	2a f0       	brmi	.+10     	; 0x3cc <__floatsisf+0x6c>
 3c2:	9a 95       	dec	r25
 3c4:	66 0f       	add	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	88 1f       	adc	r24, r24
 3ca:	da f7       	brpl	.-10     	; 0x3c2 <__floatsisf+0x62>
 3cc:	88 0f       	add	r24, r24
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	97 f9       	bld	r25, 7
 3d4:	08 95       	ret

000003d6 <__fp_inf>:
 3d6:	97 f9       	bld	r25, 7
 3d8:	9f 67       	ori	r25, 0x7F	; 127
 3da:	80 e8       	ldi	r24, 0x80	; 128
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	08 95       	ret

000003e2 <__fp_nan>:
 3e2:	9f ef       	ldi	r25, 0xFF	; 255
 3e4:	80 ec       	ldi	r24, 0xC0	; 192
 3e6:	08 95       	ret

000003e8 <__fp_pscA>:
 3e8:	00 24       	eor	r0, r0
 3ea:	0a 94       	dec	r0
 3ec:	16 16       	cp	r1, r22
 3ee:	17 06       	cpc	r1, r23
 3f0:	18 06       	cpc	r1, r24
 3f2:	09 06       	cpc	r0, r25
 3f4:	08 95       	ret

000003f6 <__fp_pscB>:
 3f6:	00 24       	eor	r0, r0
 3f8:	0a 94       	dec	r0
 3fa:	12 16       	cp	r1, r18
 3fc:	13 06       	cpc	r1, r19
 3fe:	14 06       	cpc	r1, r20
 400:	05 06       	cpc	r0, r21
 402:	08 95       	ret

00000404 <__fp_round>:
 404:	09 2e       	mov	r0, r25
 406:	03 94       	inc	r0
 408:	00 0c       	add	r0, r0
 40a:	11 f4       	brne	.+4      	; 0x410 <__fp_round+0xc>
 40c:	88 23       	and	r24, r24
 40e:	52 f0       	brmi	.+20     	; 0x424 <__fp_round+0x20>
 410:	bb 0f       	add	r27, r27
 412:	40 f4       	brcc	.+16     	; 0x424 <__fp_round+0x20>
 414:	bf 2b       	or	r27, r31
 416:	11 f4       	brne	.+4      	; 0x41c <__fp_round+0x18>
 418:	60 ff       	sbrs	r22, 0
 41a:	04 c0       	rjmp	.+8      	; 0x424 <__fp_round+0x20>
 41c:	6f 5f       	subi	r22, 0xFF	; 255
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	8f 4f       	sbci	r24, 0xFF	; 255
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	08 95       	ret

00000426 <__fp_split3>:
 426:	57 fd       	sbrc	r21, 7
 428:	90 58       	subi	r25, 0x80	; 128
 42a:	44 0f       	add	r20, r20
 42c:	55 1f       	adc	r21, r21
 42e:	59 f0       	breq	.+22     	; 0x446 <__fp_splitA+0x10>
 430:	5f 3f       	cpi	r21, 0xFF	; 255
 432:	71 f0       	breq	.+28     	; 0x450 <__fp_splitA+0x1a>
 434:	47 95       	ror	r20

00000436 <__fp_splitA>:
 436:	88 0f       	add	r24, r24
 438:	97 fb       	bst	r25, 7
 43a:	99 1f       	adc	r25, r25
 43c:	61 f0       	breq	.+24     	; 0x456 <__fp_splitA+0x20>
 43e:	9f 3f       	cpi	r25, 0xFF	; 255
 440:	79 f0       	breq	.+30     	; 0x460 <__fp_splitA+0x2a>
 442:	87 95       	ror	r24
 444:	08 95       	ret
 446:	12 16       	cp	r1, r18
 448:	13 06       	cpc	r1, r19
 44a:	14 06       	cpc	r1, r20
 44c:	55 1f       	adc	r21, r21
 44e:	f2 cf       	rjmp	.-28     	; 0x434 <__fp_split3+0xe>
 450:	46 95       	lsr	r20
 452:	f1 df       	rcall	.-30     	; 0x436 <__fp_splitA>
 454:	08 c0       	rjmp	.+16     	; 0x466 <__fp_splitA+0x30>
 456:	16 16       	cp	r1, r22
 458:	17 06       	cpc	r1, r23
 45a:	18 06       	cpc	r1, r24
 45c:	99 1f       	adc	r25, r25
 45e:	f1 cf       	rjmp	.-30     	; 0x442 <__fp_splitA+0xc>
 460:	86 95       	lsr	r24
 462:	71 05       	cpc	r23, r1
 464:	61 05       	cpc	r22, r1
 466:	08 94       	sec
 468:	08 95       	ret

0000046a <__fp_zero>:
 46a:	e8 94       	clt

0000046c <__fp_szero>:
 46c:	bb 27       	eor	r27, r27
 46e:	66 27       	eor	r22, r22
 470:	77 27       	eor	r23, r23
 472:	cb 01       	movw	r24, r22
 474:	97 f9       	bld	r25, 7
 476:	08 95       	ret

00000478 <__mulsf3>:
 478:	0e 94 4f 02 	call	0x49e	; 0x49e <__mulsf3x>
 47c:	0c 94 02 02 	jmp	0x404	; 0x404 <__fp_round>
 480:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__fp_pscA>
 484:	38 f0       	brcs	.+14     	; 0x494 <__mulsf3+0x1c>
 486:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_pscB>
 48a:	20 f0       	brcs	.+8      	; 0x494 <__mulsf3+0x1c>
 48c:	95 23       	and	r25, r21
 48e:	11 f0       	breq	.+4      	; 0x494 <__mulsf3+0x1c>
 490:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__fp_inf>
 494:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__fp_nan>
 498:	11 24       	eor	r1, r1
 49a:	0c 94 36 02 	jmp	0x46c	; 0x46c <__fp_szero>

0000049e <__mulsf3x>:
 49e:	0e 94 13 02 	call	0x426	; 0x426 <__fp_split3>
 4a2:	70 f3       	brcs	.-36     	; 0x480 <__mulsf3+0x8>

000004a4 <__mulsf3_pse>:
 4a4:	95 9f       	mul	r25, r21
 4a6:	c1 f3       	breq	.-16     	; 0x498 <__mulsf3+0x20>
 4a8:	95 0f       	add	r25, r21
 4aa:	50 e0       	ldi	r21, 0x00	; 0
 4ac:	55 1f       	adc	r21, r21
 4ae:	62 9f       	mul	r22, r18
 4b0:	f0 01       	movw	r30, r0
 4b2:	72 9f       	mul	r23, r18
 4b4:	bb 27       	eor	r27, r27
 4b6:	f0 0d       	add	r31, r0
 4b8:	b1 1d       	adc	r27, r1
 4ba:	63 9f       	mul	r22, r19
 4bc:	aa 27       	eor	r26, r26
 4be:	f0 0d       	add	r31, r0
 4c0:	b1 1d       	adc	r27, r1
 4c2:	aa 1f       	adc	r26, r26
 4c4:	64 9f       	mul	r22, r20
 4c6:	66 27       	eor	r22, r22
 4c8:	b0 0d       	add	r27, r0
 4ca:	a1 1d       	adc	r26, r1
 4cc:	66 1f       	adc	r22, r22
 4ce:	82 9f       	mul	r24, r18
 4d0:	22 27       	eor	r18, r18
 4d2:	b0 0d       	add	r27, r0
 4d4:	a1 1d       	adc	r26, r1
 4d6:	62 1f       	adc	r22, r18
 4d8:	73 9f       	mul	r23, r19
 4da:	b0 0d       	add	r27, r0
 4dc:	a1 1d       	adc	r26, r1
 4de:	62 1f       	adc	r22, r18
 4e0:	83 9f       	mul	r24, r19
 4e2:	a0 0d       	add	r26, r0
 4e4:	61 1d       	adc	r22, r1
 4e6:	22 1f       	adc	r18, r18
 4e8:	74 9f       	mul	r23, r20
 4ea:	33 27       	eor	r19, r19
 4ec:	a0 0d       	add	r26, r0
 4ee:	61 1d       	adc	r22, r1
 4f0:	23 1f       	adc	r18, r19
 4f2:	84 9f       	mul	r24, r20
 4f4:	60 0d       	add	r22, r0
 4f6:	21 1d       	adc	r18, r1
 4f8:	82 2f       	mov	r24, r18
 4fa:	76 2f       	mov	r23, r22
 4fc:	6a 2f       	mov	r22, r26
 4fe:	11 24       	eor	r1, r1
 500:	9f 57       	subi	r25, 0x7F	; 127
 502:	50 40       	sbci	r21, 0x00	; 0
 504:	9a f0       	brmi	.+38     	; 0x52c <__mulsf3_pse+0x88>
 506:	f1 f0       	breq	.+60     	; 0x544 <__mulsf3_pse+0xa0>
 508:	88 23       	and	r24, r24
 50a:	4a f0       	brmi	.+18     	; 0x51e <__mulsf3_pse+0x7a>
 50c:	ee 0f       	add	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	bb 1f       	adc	r27, r27
 512:	66 1f       	adc	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	91 50       	subi	r25, 0x01	; 1
 51a:	50 40       	sbci	r21, 0x00	; 0
 51c:	a9 f7       	brne	.-22     	; 0x508 <__mulsf3_pse+0x64>
 51e:	9e 3f       	cpi	r25, 0xFE	; 254
 520:	51 05       	cpc	r21, r1
 522:	80 f0       	brcs	.+32     	; 0x544 <__mulsf3_pse+0xa0>
 524:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__fp_inf>
 528:	0c 94 36 02 	jmp	0x46c	; 0x46c <__fp_szero>
 52c:	5f 3f       	cpi	r21, 0xFF	; 255
 52e:	e4 f3       	brlt	.-8      	; 0x528 <__mulsf3_pse+0x84>
 530:	98 3e       	cpi	r25, 0xE8	; 232
 532:	d4 f3       	brlt	.-12     	; 0x528 <__mulsf3_pse+0x84>
 534:	86 95       	lsr	r24
 536:	77 95       	ror	r23
 538:	67 95       	ror	r22
 53a:	b7 95       	ror	r27
 53c:	f7 95       	ror	r31
 53e:	e7 95       	ror	r30
 540:	9f 5f       	subi	r25, 0xFF	; 255
 542:	c1 f7       	brne	.-16     	; 0x534 <__mulsf3_pse+0x90>
 544:	fe 2b       	or	r31, r30
 546:	88 0f       	add	r24, r24
 548:	91 1d       	adc	r25, r1
 54a:	96 95       	lsr	r25
 54c:	87 95       	ror	r24
 54e:	97 f9       	bld	r25, 7
 550:	08 95       	ret

00000552 <__udivmodhi4>:
 552:	aa 1b       	sub	r26, r26
 554:	bb 1b       	sub	r27, r27
 556:	51 e1       	ldi	r21, 0x11	; 17
 558:	07 c0       	rjmp	.+14     	; 0x568 <__udivmodhi4_ep>

0000055a <__udivmodhi4_loop>:
 55a:	aa 1f       	adc	r26, r26
 55c:	bb 1f       	adc	r27, r27
 55e:	a6 17       	cp	r26, r22
 560:	b7 07       	cpc	r27, r23
 562:	10 f0       	brcs	.+4      	; 0x568 <__udivmodhi4_ep>
 564:	a6 1b       	sub	r26, r22
 566:	b7 0b       	sbc	r27, r23

00000568 <__udivmodhi4_ep>:
 568:	88 1f       	adc	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	5a 95       	dec	r21
 56e:	a9 f7       	brne	.-22     	; 0x55a <__udivmodhi4_loop>
 570:	80 95       	com	r24
 572:	90 95       	com	r25
 574:	bc 01       	movw	r22, r24
 576:	cd 01       	movw	r24, r26
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
